// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarsQA_1.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Education")]
    public partial class EducationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Education.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Education", "\t\tAs a Seller\r\n\t\tI want to be able to complete my Education section of Profile\r\n\t" +
                    "\tSo that anyone can view my updations of Education", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add New Education qualification to Profile Details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void AddNewEducationQualificationToProfileDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add New Education qualification to Profile Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("The seller is on the Profile details page to Add New Educations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("The seller enters Collage/University name ,Degree", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table1.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
#line 11
 testRunner.And("select the Country of College ,Title ,Year of graduation", ((string)(null)), table1, "And ");
#line hidden
#line 14
 testRunner.Then("it should dispaly message\"Unitec  has been added to your skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Education qualification to the profile detail page using special characters")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void AddEducationQualificationToTheProfileDetailPageUsingSpecialCharacters()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Education qualification to the profile detail page using special characters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("The seller is on the Profile details page to Add New Education qualification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When("The seller enters Collage/University name ,Degree", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table2.AddRow(new string[] {
                            "%^&*",
                            "",
                            "%&*&",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table2.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
#line 20
 testRunner.And("select the Country of College ,Title ,Year of graduation", ((string)(null)), table2, "And ");
#line hidden
#line 24
 testRunner.Then("it should dispaly message\"Education has been added\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Edcation to the Profile Details page using numeric characters")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void AddEdcationToTheProfileDetailsPageUsingNumericCharacters()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Edcation to the Profile Details page using numeric characters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("The seller is on the Profile details page to Add New Education", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When("The seller enters Collage/University name ,Degree", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table3.AddRow(new string[] {
                            "%^&*",
                            "",
                            "%&*&",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table3.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table3.AddRow(new string[] {
                            "12345",
                            "",
                            "2343523",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
#line 30
 testRunner.And("select the Country of College ,Title ,Year of graduation", ((string)(null)), table3, "And ");
#line hidden
#line 35
   testRunner.Then("it should dispaly message\"Education has been added\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Exsisting Education on Profile Details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void UpdateExsistingEducationOnProfileDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Exsisting Education on Profile Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given("The Seller is on the Profile page to update only Education details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.When("The seller enters Collage/University name ,Degree", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table4.AddRow(new string[] {
                            "zanh23@",
                            "",
                            "%&*&",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table4.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table4.AddRow(new string[] {
                            "12345",
                            "",
                            "2343523",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
#line 41
 testRunner.And("select the Country of College ,Title ,Year of graduation", ((string)(null)), table4, "And ");
#line hidden
#line 46
 testRunner.Then("it should display message \"Education has been updated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Title,year of Exsisting Education on Profile Details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void UpdateTitleYearOfExsistingEducationOnProfileDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Title,year of Exsisting Education on Profile Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given("The Seller is on the Profile page to update only Ttile,year details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.When("The seller enters Collage/University name ,Degree", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table5.AddRow(new string[] {
                            "zanh23@",
                            "",
                            "%&*&",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table5.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- Deploma",
                            "",
                            "2020"});
                table5.AddRow(new string[] {
                            "12345",
                            "",
                            "2343523",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
#line 52
 testRunner.And("select the Country of College ,Title ,Year of graduation", ((string)(null)), table5, "And ");
#line hidden
#line 57
 testRunner.Then("it should display message \"Education has been updated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete  Education from Profile Details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void DeleteEducationFromProfileDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete  Education from Profile Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table6.AddRow(new string[] {
                            "zanh23@",
                            "",
                            "%&*&",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table6.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- Deploma",
                            "",
                            "2020"});
                table6.AddRow(new string[] {
                            "12345",
                            "",
                            "2343523",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
#line 61
 testRunner.Given("The Seller is on the Profile page to delete the Education", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table7.AddRow(new string[] {
                            "zanh23@",
                            "",
                            "%&*&",
                            "",
                            "NZ",
                            "",
                            "IT- degree",
                            "",
                            "2021"});
                table7.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- Deploma",
                            "",
                            "2020"});
#line 66
 testRunner.When("The seller delete the Education", ((string)(null)), table7, "When ");
#line hidden
#line 70
 testRunner.Then("it should display message \"Education has been deleted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Same Education to the Profile Details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void AddSameEducationToTheProfileDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Same Education to the Profile Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
 testRunner.Given("The seller is on the Profile details page to Add same Education", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table8.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- Deploma",
                            "",
                            "2020"});
#line 77
 testRunner.When("The seller enter same Education details", ((string)(null)), table8, "When ");
#line hidden
#line 80
    testRunner.Then("It should display the message \"Duplicate data\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Keeps the blank data feilds on Profile Details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void KeepsTheBlankDataFeildsOnProfileDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Keeps the blank data feilds on Profile Details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.Given("The seller is on profile details page to keep Education fields blank", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collage/University name",
                            "",
                            "Degree",
                            "",
                            "Country of College",
                            "",
                            "Title",
                            "",
                            "Year of Graduation"});
                table9.AddRow(new string[] {
                            "",
                            "",
                            "%&*&",
                            "",
                            "",
                            "",
                            "IT- degree",
                            "",
                            ""});
                table9.AddRow(new string[] {
                            "Unitec",
                            "",
                            "B.Sc",
                            "",
                            "NZ",
                            "",
                            "IT- Deploma",
                            "",
                            "2020"});
#line 85
 testRunner.When("The seller keep blank feilds", ((string)(null)), table9, "When ");
#line hidden
#line 89
 testRunner.Then("It should dispaly the message\"Please enter all details\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
